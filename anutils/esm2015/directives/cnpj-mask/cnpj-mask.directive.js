import { Directive, HostListener, ElementRef } from '@angular/core';
export class CnpjMaskDirective {
    constructor(el) {
        this.el = el;
        this.previousValue = '';
    }
    setMask() {
        const element = this.el.nativeElement;
        const mask = this.createMask(element.value);
        if (element.value !== this.previousValue) {
            element.value = mask;
            this.previousValue = mask;
            element.dispatchEvent(new Event('input'));
        }
    }
    ngOnInit() {
        setTimeout(() => this.setMask(), 0);
    }
    createMask(cnpj) {
        let newVal = cnpj.replace(/\D/g, '');
        if (newVal.length === 0) {
            newVal = '';
        }
        else if (newVal.length <= 2) {
            newVal = newVal.replace(/^(\d{0,2})/, '$1');
        }
        else if (newVal.length <= 6) {
            newVal = newVal.replace(/^(\d{0,2})(.*)/, '$1.$2');
        }
        else if (newVal.length <= 9) {
            newVal = newVal.replace(/^(\d{0,2})(\d{0,3})(.*)/, '$1.$2.$3');
        }
        else if (newVal.length <= 13) {
            newVal = newVal.replace(/^(\d{0,2})(\d{0,3})(\d{0,3})(.*)/, '$1.$2.$3/$4');
        }
        else {
            newVal = newVal.replace(/^(\d{0,2})(\d{0,3})(\d{0,3})(\d{0,4})(.*)/, '$1.$2.$3/$4-$5');
        }
        return newVal.substr(0, 18);
    }
}
CnpjMaskDirective.decorators = [
    { type: Directive, args: [{
                selector: '[anutilsCnpjMask]',
            },] }
];
CnpjMaskDirective.ctorParameters = () => [
    { type: ElementRef }
];
CnpjMaskDirective.propDecorators = {
    setMask: [{ type: HostListener, args: ['input',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY25wai1tYXNrLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FudXRpbHMvZGlyZWN0aXZlcy9jbnBqLW1hc2svY25wai1tYXNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFLNUUsTUFBTSxPQUFPLGlCQUFpQjtJQUc1QixZQUFvQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUYxQixrQkFBYSxHQUFHLEVBQUUsQ0FBQztJQUVVLENBQUM7SUFHdEMsT0FBTztRQUNMLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBaUMsQ0FBQztRQUMxRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QyxJQUFJLE9BQU8sQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN4QyxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztZQUNyQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztZQUMxQixPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDM0M7SUFDSCxDQUFDO0lBRUQsUUFBUTtRQUNOLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUFZO1FBQ3JCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDdkIsTUFBTSxHQUFHLEVBQUUsQ0FBQztTQUNiO2FBQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUM3QixNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDN0M7YUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQzdCLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ3BEO2FBQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUM3QixNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUNoRTthQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxFQUFFLEVBQUU7WUFDOUIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQ3JCLGtDQUFrQyxFQUNsQyxhQUFhLENBQ2QsQ0FBQztTQUNIO2FBQU07WUFDTCxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FDckIsMkNBQTJDLEVBQzNDLGdCQUFnQixDQUNqQixDQUFDO1NBQ0g7UUFDRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLENBQUM7OztZQTdDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjthQUM5Qjs7O1lBSmlDLFVBQVU7OztzQkFVekMsWUFBWSxTQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgRWxlbWVudFJlZiwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1thbnV0aWxzQ25wak1hc2tdJyxcbn0pXG5leHBvcnQgY2xhc3MgQ25wak1hc2tEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICBwcml2YXRlIHByZXZpb3VzVmFsdWUgPSAnJztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7fVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2lucHV0JylcbiAgc2V0TWFzaygpOiB2b2lkIHtcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgY29uc3QgbWFzayA9IHRoaXMuY3JlYXRlTWFzayhlbGVtZW50LnZhbHVlKTtcbiAgICBpZiAoZWxlbWVudC52YWx1ZSAhPT0gdGhpcy5wcmV2aW91c1ZhbHVlKSB7XG4gICAgICBlbGVtZW50LnZhbHVlID0gbWFzaztcbiAgICAgIHRoaXMucHJldmlvdXNWYWx1ZSA9IG1hc2s7XG4gICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdpbnB1dCcpKTtcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2V0TWFzaygpLCAwKTtcbiAgfVxuXG4gIGNyZWF0ZU1hc2soY25wajogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBsZXQgbmV3VmFsID0gY25wai5yZXBsYWNlKC9cXEQvZywgJycpO1xuICAgIGlmIChuZXdWYWwubGVuZ3RoID09PSAwKSB7XG4gICAgICBuZXdWYWwgPSAnJztcbiAgICB9IGVsc2UgaWYgKG5ld1ZhbC5sZW5ndGggPD0gMikge1xuICAgICAgbmV3VmFsID0gbmV3VmFsLnJlcGxhY2UoL14oXFxkezAsMn0pLywgJyQxJyk7XG4gICAgfSBlbHNlIGlmIChuZXdWYWwubGVuZ3RoIDw9IDYpIHtcbiAgICAgIG5ld1ZhbCA9IG5ld1ZhbC5yZXBsYWNlKC9eKFxcZHswLDJ9KSguKikvLCAnJDEuJDInKTtcbiAgICB9IGVsc2UgaWYgKG5ld1ZhbC5sZW5ndGggPD0gOSkge1xuICAgICAgbmV3VmFsID0gbmV3VmFsLnJlcGxhY2UoL14oXFxkezAsMn0pKFxcZHswLDN9KSguKikvLCAnJDEuJDIuJDMnKTtcbiAgICB9IGVsc2UgaWYgKG5ld1ZhbC5sZW5ndGggPD0gMTMpIHtcbiAgICAgIG5ld1ZhbCA9IG5ld1ZhbC5yZXBsYWNlKFxuICAgICAgICAvXihcXGR7MCwyfSkoXFxkezAsM30pKFxcZHswLDN9KSguKikvLFxuICAgICAgICAnJDEuJDIuJDMvJDQnXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdWYWwgPSBuZXdWYWwucmVwbGFjZShcbiAgICAgICAgL14oXFxkezAsMn0pKFxcZHswLDN9KShcXGR7MCwzfSkoXFxkezAsNH0pKC4qKS8sXG4gICAgICAgICckMS4kMi4kMy8kNC0kNSdcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBuZXdWYWwuc3Vic3RyKDAsIDE4KTtcbiAgfVxufVxuIl19