{"version":3,"sources":["../../../projects/anutils/directives/cpf-mask/cpf-mask.directive.ts","../../../projects/anutils/directives/cnpj-mask/cnpj-mask.directive.ts","../../../projects/anutils/directives/phone-mask/phone-mask.directive.ts","../../../projects/anutils/directives/zip-code-mask/zip-code-mask.directive.ts","../../../projects/anutils/directives/shimmer/shimmer.directive.ts","../../../projects/anutils/directives/anutils-directives.module.ts"],"names":["CpfMaskDirective","el","this","previousValue","prototype","setMask","element","nativeElement","mask","createMask","value","dispatchEvent","Event","ngOnInit","_this","setTimeout","cpf","newVal","replace","length","substr","Directive","args","selector","ElementRef","HostListener","CnpjMaskDirective","cnpj","PhoneMaskDirective","phone","maskType","Input","type","ZipCodeMaskDirective","zipCode","ShimmerDirective","anutilsShimmer","anutilsShimmerInfo","width","height","Object","defineProperty","ngOnChanges","HostBinding","NgModule","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["import { Directive, HostListener, ElementRef, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[anutilsCpfMask]',\n})\nexport class CpfMaskDirective implements OnInit {\n  private previousValue = '';\n\n  constructor(private el: ElementRef) {}\n  @HostListener('input')\n  setMask(): void {\n    const element = this.el.nativeElement as HTMLInputElement;\n    const mask = this.createMask(element.value);\n    if (element.value !== this.previousValue) {\n      element.value = mask;\n      this.previousValue = mask;\n      element.dispatchEvent(new Event('input'));\n    }\n  }\n\n  ngOnInit(): void {\n    setTimeout(() => this.setMask(), 0);\n  }\n\n  createMask(cpf: string): string {\n    let newVal = cpf.replace(/\\D/g, '');\n    if (newVal.length === 0) {\n      newVal = '';\n    } else if (newVal.length <= 3) {\n      newVal = newVal.replace(/^(\\d{0,3})/, '$1');\n    } else if (newVal.length <= 6) {\n      newVal = newVal.replace(/^(\\d{0,3})(.*)/, '$1.$2');\n    } else if (newVal.length <= 9) {\n      newVal = newVal.replace(/^(\\d{0,3})(\\d{0,3})(.*)/, '$1.$2.$3');\n    } else {\n      newVal = newVal.replace(\n        /^(\\d{0,3})(\\d{0,3})(\\d{0,3})(.*)/,\n        '$1.$2.$3-$4'\n      );\n    }\n    return newVal.substr(0, 14);\n  }\n}\n","import { Directive, HostListener, ElementRef, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[anutilsCnpjMask]',\n})\nexport class CnpjMaskDirective implements OnInit {\n  private previousValue = '';\n\n  constructor(private el: ElementRef) {}\n\n  @HostListener('input')\n  setMask(): void {\n    const element = this.el.nativeElement as HTMLInputElement;\n    const mask = this.createMask(element.value);\n    if (element.value !== this.previousValue) {\n      element.value = mask;\n      this.previousValue = mask;\n      element.dispatchEvent(new Event('input'));\n    }\n  }\n\n  ngOnInit(): void {\n    setTimeout(() => this.setMask(), 0);\n  }\n\n  createMask(cnpj: string): string {\n    let newVal = cnpj.replace(/\\D/g, '');\n    if (newVal.length === 0) {\n      newVal = '';\n    } else if (newVal.length <= 2) {\n      newVal = newVal.replace(/^(\\d{0,2})/, '$1');\n    } else if (newVal.length <= 6) {\n      newVal = newVal.replace(/^(\\d{0,2})(.*)/, '$1.$2');\n    } else if (newVal.length <= 9) {\n      newVal = newVal.replace(/^(\\d{0,2})(\\d{0,3})(.*)/, '$1.$2.$3');\n    } else if (newVal.length <= 13) {\n      newVal = newVal.replace(\n        /^(\\d{0,2})(\\d{0,3})(\\d{0,3})(.*)/,\n        '$1.$2.$3/$4'\n      );\n    } else {\n      newVal = newVal.replace(\n        /^(\\d{0,2})(\\d{0,3})(\\d{0,3})(\\d{0,4})(.*)/,\n        '$1.$2.$3/$4-$5'\n      );\n    }\n    return newVal.substr(0, 18);\n  }\n}\n","import {\n  Directive,\n  HostListener,\n  ElementRef,\n  OnInit,\n  Input,\n} from '@angular/core';\n\n@Directive({\n  selector: '[anutilsPhoneMask]',\n})\nexport class PhoneMaskDirective implements OnInit {\n  @Input('anutilsPhoneMask') maskType: number | undefined;\n  private previousValue = '';\n\n  constructor(private el: ElementRef) {}\n\n  @HostListener('ngModelChange')\n  @HostListener('input')\n  setMask(): void {\n    const element = this.el.nativeElement as HTMLInputElement;\n    const mask = this.createMask(element.value);\n    if (element.value !== this.previousValue) {\n      element.value = mask;\n      this.previousValue = mask;\n      element.dispatchEvent(new Event('input'));\n      setTimeout(() => {\n        element.dispatchEvent(new Event('input'));\n      });\n    }\n  }\n\n  ngOnInit(): void {\n    setTimeout(() => this.setMask(), 0);\n  }\n\n  createMask(phone: string): string {\n    phone = phone.replace(/\\D/g, '');\n    if (phone.length == 0) {\n      return '';\n    }\n    if (phone.length <= 2) {\n      return phone.replace(/^(\\d{0,2})/, '($1');\n    }\n    if (phone.length <= 7) {\n      return phone.replace(/^(\\d{0,2})(.*)/, '($1) $2');\n    }\n    if (phone.length <= 10 && this.maskType == 9) {\n      return phone.replace(/^(\\d{0,2})(\\d{0,5})(.*)/, '($1) $2-$3');\n    }\n    if (phone.length <= 10) {\n      return phone.replace(/^(\\d{0,2})(\\d{0,4})(.*)/, '($1) $2-$3');\n    }\n    return phone\n      .replace(/^(\\d{0,2})(\\d{0,3})(\\d{0,3})(\\d{0,3})/, '($1) $2-$3-$4')\n      .substr(0, 16);\n  }\n}\n","import { Directive, HostListener, ElementRef, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[anutilsZipCodeMask]',\n})\nexport class ZipCodeMaskDirective implements OnInit {\n  private previousValue = '';\n\n  constructor(private el: ElementRef) {}\n\n  @HostListener('ngModelChange')\n  @HostListener('input')\n  setMask(): void {\n    const element = this.el.nativeElement as HTMLInputElement;\n    const mask = this.createMask(element.value);\n    if (element.value !== this.previousValue) {\n      element.value = mask;\n      this.previousValue = mask;\n      element.dispatchEvent(new Event('input'));\n      setTimeout(() => {\n        element.dispatchEvent(new Event('input'));\n      });\n    }\n  }\n\n  ngOnInit(): void {\n    setTimeout(() => this.setMask(), 0);\n  }\n\n  createMask(zipCode: string): string {\n    if (zipCode.length == 0) {\n      return '';\n    }\n\n    if (zipCode.length <= 9) {\n      zipCode = zipCode.replace(/\\D/g, '');\n      zipCode = zipCode.replace(/^(\\d{5})(\\d)/, '$1-$2');\n      return zipCode;\n    }\n\n    return zipCode.substr(0, 9);\n  }\n}\n","import { Directive, HostBinding, Input, OnChanges } from '@angular/core';\nimport { IShimmer } from './shimmer.interface';\n\n@Directive({\n  selector: '[anutilsShimmer]',\n})\nexport class ShimmerDirective implements OnChanges {\n  @Input() anutilsShimmer = false;\n  @Input() anutilsShimmerInfo: IShimmer = { width: '0', height: '0' };\n\n  @HostBinding('class.shimmer') get shimmer(): boolean {\n    return this.anutilsShimmer;\n  }\n\n  @HostBinding('style.width') width: string | undefined;\n  @HostBinding('style.height') height: string | undefined;\n\n  ngOnChanges(): void {\n    if (this.anutilsShimmer) {\n      this.width = this.anutilsShimmerInfo.width;\n      this.height = this.anutilsShimmerInfo.height;\n    } else {\n      this.width = 'auto';\n      this.height = 'auto';\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CpfMaskDirective } from './cpf-mask/cpf-mask.directive';\nimport { CnpjMaskDirective } from './cnpj-mask/cnpj-mask.directive';\nimport { PhoneMaskDirective } from './phone-mask/phone-mask.directive';\nimport { ZipCodeMaskDirective } from './zip-code-mask/zip-code-mask.directive';\nimport { ShimmerDirective } from './shimmer/shimmer.directive';\n\n@NgModule({\n  declarations: [\n    CpfMaskDirective,\n    CnpjMaskDirective,\n    PhoneMaskDirective,\n    ZipCodeMaskDirective,\n    ShimmerDirective,\n  ],\n  imports: [CommonModule],\n  exports: [\n    CpfMaskDirective,\n    CnpjMaskDirective,\n    PhoneMaskDirective,\n    ZipCodeMaskDirective,\n    ShimmerDirective,\n  ],\n})\nexport class AnutilsDirectivesModule {}\n"]}