import { Directive, HostListener, ElementRef } from '@angular/core';
export class CpfMaskDirective {
    constructor(el) {
        this.el = el;
        this.previousValue = '';
    }
    setMask() {
        const element = this.el.nativeElement;
        const mask = this.createMask(element.value);
        if (element.value !== this.previousValue) {
            element.value = mask;
            this.previousValue = mask;
            element.dispatchEvent(new Event('input'));
        }
    }
    ngOnInit() {
        setTimeout(() => this.setMask(), 0);
    }
    createMask(cpf) {
        let newVal = cpf.replace(/\D/g, '');
        if (newVal.length === 0) {
            newVal = '';
        }
        else if (newVal.length <= 3) {
            newVal = newVal.replace(/^(\d{0,3})/, '$1');
        }
        else if (newVal.length <= 6) {
            newVal = newVal.replace(/^(\d{0,3})(.*)/, '$1.$2');
        }
        else if (newVal.length <= 9) {
            newVal = newVal.replace(/^(\d{0,3})(\d{0,3})(.*)/, '$1.$2.$3');
        }
        else {
            newVal = newVal.replace(/^(\d{0,3})(\d{0,3})(\d{0,3})(.*)/, '$1.$2.$3-$4');
        }
        return newVal.substr(0, 14);
    }
}
CpfMaskDirective.decorators = [
    { type: Directive, args: [{
                selector: '[anutilsCpfMask]',
            },] }
];
CpfMaskDirective.ctorParameters = () => [
    { type: ElementRef }
];
CpfMaskDirective.propDecorators = {
    setMask: [{ type: HostListener, args: ['input',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3BmLW1hc2suZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW51dGlscy9kaXJlY3RpdmVzL2NwZi1tYXNrL2NwZi1tYXNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFLNUUsTUFBTSxPQUFPLGdCQUFnQjtJQUczQixZQUFvQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUYxQixrQkFBYSxHQUFHLEVBQUUsQ0FBQztJQUVVLENBQUM7SUFFdEMsT0FBTztRQUNMLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBaUMsQ0FBQztRQUMxRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QyxJQUFJLE9BQU8sQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN4QyxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztZQUNyQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztZQUMxQixPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDM0M7SUFDSCxDQUFDO0lBRUQsUUFBUTtRQUNOLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELFVBQVUsQ0FBQyxHQUFXO1FBQ3BCLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3BDLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDdkIsTUFBTSxHQUFHLEVBQUUsQ0FBQztTQUNiO2FBQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUM3QixNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDN0M7YUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQzdCLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ3BEO2FBQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUM3QixNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUNoRTthQUFNO1lBQ0wsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQ3JCLGtDQUFrQyxFQUNsQyxhQUFhLENBQ2QsQ0FBQztTQUNIO1FBQ0QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7WUF2Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxrQkFBa0I7YUFDN0I7OztZQUppQyxVQUFVOzs7c0JBU3pDLFlBQVksU0FBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIEVsZW1lbnRSZWYsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYW51dGlsc0NwZk1hc2tdJyxcbn0pXG5leHBvcnQgY2xhc3MgQ3BmTWFza0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHByaXZhdGUgcHJldmlvdXNWYWx1ZSA9ICcnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHt9XG4gIEBIb3N0TGlzdGVuZXIoJ2lucHV0JylcbiAgc2V0TWFzaygpOiB2b2lkIHtcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgY29uc3QgbWFzayA9IHRoaXMuY3JlYXRlTWFzayhlbGVtZW50LnZhbHVlKTtcbiAgICBpZiAoZWxlbWVudC52YWx1ZSAhPT0gdGhpcy5wcmV2aW91c1ZhbHVlKSB7XG4gICAgICBlbGVtZW50LnZhbHVlID0gbWFzaztcbiAgICAgIHRoaXMucHJldmlvdXNWYWx1ZSA9IG1hc2s7XG4gICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdpbnB1dCcpKTtcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2V0TWFzaygpLCAwKTtcbiAgfVxuXG4gIGNyZWF0ZU1hc2soY3BmOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGxldCBuZXdWYWwgPSBjcGYucmVwbGFjZSgvXFxEL2csICcnKTtcbiAgICBpZiAobmV3VmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgbmV3VmFsID0gJyc7XG4gICAgfSBlbHNlIGlmIChuZXdWYWwubGVuZ3RoIDw9IDMpIHtcbiAgICAgIG5ld1ZhbCA9IG5ld1ZhbC5yZXBsYWNlKC9eKFxcZHswLDN9KS8sICckMScpO1xuICAgIH0gZWxzZSBpZiAobmV3VmFsLmxlbmd0aCA8PSA2KSB7XG4gICAgICBuZXdWYWwgPSBuZXdWYWwucmVwbGFjZSgvXihcXGR7MCwzfSkoLiopLywgJyQxLiQyJyk7XG4gICAgfSBlbHNlIGlmIChuZXdWYWwubGVuZ3RoIDw9IDkpIHtcbiAgICAgIG5ld1ZhbCA9IG5ld1ZhbC5yZXBsYWNlKC9eKFxcZHswLDN9KShcXGR7MCwzfSkoLiopLywgJyQxLiQyLiQzJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1ZhbCA9IG5ld1ZhbC5yZXBsYWNlKFxuICAgICAgICAvXihcXGR7MCwzfSkoXFxkezAsM30pKFxcZHswLDN9KSguKikvLFxuICAgICAgICAnJDEuJDIuJDMtJDQnXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbmV3VmFsLnN1YnN0cigwLCAxNCk7XG4gIH1cbn1cbiJdfQ==